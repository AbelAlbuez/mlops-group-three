# Makefile simplificado para pruebas de carga con Locust
# Uso: make -f Makefile.locust [target]

.PHONY: help up up-full down logs stats test-quick test-medium test-load clean status

# Variables
COMPOSE_FILE = docker-compose.locust-official.yml
RESULTS_DIR = load_test_results

# Colores
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m

help: ## Mostrar ayuda
	@echo "$(GREEN)Comandos disponibles:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-15s$(NC) %s\n", $$1, $$2}'

up: ## Iniciar servicios con imagen oficial ogaston/inference-g3:latest
	@echo "$(GREEN)Iniciando servicios con imagen oficial...$(NC)"
	docker compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)✅ Locust UI: http://localhost:8089$(NC)"
	@echo "$(GREEN)✅ API: http://localhost:8000$(NC)"

down: ## Detener servicios
	@echo "$(YELLOW)Deteniendo servicios...$(NC)"
	docker compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)✅ Servicios detenidos$(NC)"

logs: ## Ver logs de todos los servicios
	@echo "$(GREEN)Mostrando logs...$(NC)"
	docker compose -f $(COMPOSE_FILE) logs -f

stats: ## Ver estadísticas de recursos
	@echo "$(GREEN)Estadísticas de recursos:$(NC)"
	docker stats --no-stream

test-quick: ## Prueba rápida (500 usuarios, 5min)
	@echo "$(GREEN)Ejecutando prueba rápida...$(NC)"
	./run_load_tests.sh quick

test-medium: ## Prueba media (2000 usuarios, 10min)
	@echo "$(GREEN)Ejecutando prueba media...$(NC)"
	./run_load_tests.sh medium

test-load: ## Prueba de carga (5000 usuarios, 15min)
	@echo "$(GREEN)Ejecutando prueba de carga...$(NC)"
	./run_load_tests.sh load

test-stress: ## Prueba de estrés (10000 usuarios, 20min)
	@echo "$(GREEN)Ejecutando prueba de estrés...$(NC)"
	./run_load_tests.sh stress

clean: ## Limpiar contenedores y resultados
	@echo "$(YELLOW)Limpiando...$(NC)"
	docker compose -f $(COMPOSE_FILE) down -v
	rm -rf $(RESULTS_DIR)/*
	@echo "$(GREEN)✅ Limpieza completada$(NC)"

status: ## Ver estado de servicios
	@echo "$(GREEN)Estado de contenedores:$(NC)"
	@docker compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "$(GREEN)Health checks:$(NC)"
	@curl -s http://localhost:8000/health >/dev/null && echo "$(GREEN)✅ API OK$(NC)" || echo "$(RED)❌ API DOWN$(NC)"
	@curl -s http://localhost:8089 >/dev/null && echo "$(GREEN)✅ Locust OK$(NC)" || echo "$(RED)❌ Locust DOWN$(NC)"

# Comandos adicionales útiles
scale: ## Escalar workers (uso: make scale N=3)
	@echo "$(GREEN)Escalando workers a $(N) instancias...$(NC)"
	docker compose -f $(COMPOSE_FILE) up -d --scale locust-worker=$(N)

restart-api: ## Reiniciar solo la API
	@echo "$(GREEN)Reiniciando API...$(NC)"
	docker compose -f $(COMPOSE_FILE) restart inference-api