version: '3.8'

x-airflow-common: &airflow-common
  image: apache/airflow:2.7.1
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    # Variables para conexión MySQL
    MYSQL_HOST: mysql
    MYSQL_PORT: 3306
    MYSQL_USER: ${MYSQL_USER}
    MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    MYSQL_DATABASE: ${MYSQL_DATABASE}
    # Variables para conexión MySQL MLFlow
    MLFLOW_MYSQL_HOST: mysql-mlflow
    MLFLOW_MYSQL_PORT: 3306
    MLFLOW_MYSQL_USER: ${MLFLOW_MYSQL_USER:-mlflow_user}
    MLFLOW_MYSQL_PASSWORD: ${MLFLOW_MYSQL_PASSWORD:-mlflow_pass123}
    MLFLOW_MYSQL_DATABASE: ${MLFLOW_MYSQL_DATABASE:-mlflow_meta}
    # Instalar dependencias Python adicionales
    _PIP_ADDITIONAL_REQUIREMENTS: pandas numpy scikit-learn joblib pymysql sqlalchemy palmerpenguins seaborn mlflow
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/models:/opt/airflow/models
    - ./airflow/models_tf:/opt/airflow/models_tf
    - ./airflow/requirements.txt:/opt/airflow/requirements.txt
  user: "${AIRFLOW_UID:-50000}:0" 
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    mysql:
      condition: service_healthy
    mysql-mlflow:
      condition: service_healthy

services:
  # Base de datos PostgreSQL para metadatos de Airflow
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    ports:
      - "5432:5432"

  # Base de datos MySQL para datos de pingüinos
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - mysqldata:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      retries: 5
      start_period: 30s
    restart: always
    ports:
      - "3306:3306"
    command: --default-authentication-plugin=mysql_native_password

  # Base de datos MySQL dedicada para MLFlow
  mysql-mlflow:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MLFLOW_MYSQL_ROOT_PASSWORD:-mlflow_root123}
      MYSQL_USER: ${MLFLOW_MYSQL_USER:-mlflow_user}
      MYSQL_PASSWORD: ${MLFLOW_MYSQL_PASSWORD:-mlflow_pass123}
      MYSQL_DATABASE: ${MLFLOW_MYSQL_DATABASE:-mlflow_meta}
    volumes:
      - mlflow_mysqldata:/var/lib/mysql
      - ./mysql/init-mlflow.sql:/docker-entrypoint-initdb.d/init-mlflow.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MLFLOW_MYSQL_ROOT_PASSWORD:-mlflow_root123}"]
      interval: 10s
      retries: 5
      start_period: 30s
    restart: always
    ports:
      - "3307:3306"
    command: --default-authentication-plugin=mysql_native_password

  # Redis para Celery
  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Worker
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Airflow Triggerer
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Inicialización de Airflow
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_ADMIN_USER}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
      _AIRFLOW_WWW_USER_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
    user: "${AIRFLOW_UID:-50000}:0" 
    volumes:
      - ./airflow:/sources

  # Flower para monitoreo de Celery
  airflow-flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # MLflow Server
  mlflow:
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    container_name: mlflow-server
    environment:
      - BACKEND_STORE_URI=mysql+pymysql://${MLFLOW_MYSQL_USER:-mlflow_user}:${MLFLOW_MYSQL_PASSWORD:-mlflow_pass123}@mysql-mlflow:3306/${MLFLOW_MYSQL_DATABASE:-mlflow_meta}
      - MLFLOW_ARTIFACTS_DESTINATION=/mlflow/artifacts
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    ports:
      - "5000:5000"
    volumes:
      - ./airflow/models:/mlflow/models
      - mlflow_artifacts:/mlflow/artifacts
    depends_on:
      mysql-mlflow:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    command: >
      sh -c "
      echo 'Esperando base de datos MLFlow...';
      sleep 10;
      echo 'Iniciando servidor MLflow...';
      mlflow server
      --backend-store-uri mysql+pymysql://${MLFLOW_MYSQL_USER:-mlflow_user}:${MLFLOW_MYSQL_PASSWORD:-mlflow_pass123}@mysql-mlflow:3306/${MLFLOW_MYSQL_DATABASE:-mlflow_meta}
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
      --serve-artifacts
      "

  # API de inferencia FastAPI
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: fastapi-penguins
    ports:
      - "8000:8000"
    volumes:
      - ./airflow/models:/app/models:ro
      - ./airflow/models_tf:/app/models_tf:ro
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/models
      - MODEL_TF_PATH=/app/models_tf
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      mysql:
        condition: service_healthy
      mysql-mlflow:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Volúmenes persistentes
volumes:
  pgdata:
    driver: local
  mysqldata:
    driver: local
  mlflow_mysqldata:
    driver: local
  mlflow_artifacts:
    driver: local
  airflow_logs:
    driver: local
  airflow_plugins:
    driver: local

# Red por defecto
networks:
  default:
    name: airflow-network
    driver: bridge