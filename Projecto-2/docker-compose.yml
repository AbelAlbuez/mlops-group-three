version: "3.8"

x-airflow-env: &airflow-env
  AIRFLOW_UID: ${AIRFLOW_UID}
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
  AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@airflow-db:5432/${POSTGRES_DB}
  AIRFLOW__WEBSERVER__RBAC: "true"
  AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY}
  AIRFLOW__LOGGING__REMOTE_LOGGING: "false"
  AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ""
  AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
  _PIP_ADDITIONAL_REQUIREMENTS: ""

  # Airflow Variables for DAG (all from env)
  AIRFLOW_VAR_P2_API_BASE: ${P2_API_BASE}
  AIRFLOW_VAR_P2_GROUP_ID: ${P2_GROUP_ID}
  AIRFLOW_VAR_P2_API_PATH: ${P2_API_PATH}
  AIRFLOW_VAR_P2_TARGET_COL: ${P2_TARGET_COL}
  AIRFLOW_VAR_P2_SCHEDULE_CRON: ${P2_SCHEDULE_CRON}
  AIRFLOW_VAR_P2_DATA_DIR: ${P2_DATA_DIR}
  AIRFLOW_VAR_P2_RANDOM_STATE: ${P2_RANDOM_STATE}
  AIRFLOW_VAR_P2_TEST_SIZE: ${P2_TEST_SIZE}
  AIRFLOW_VAR_P2_MIN_SAMPLE_INCREMENT: ${P2_MIN_SAMPLE_INCREMENT}

  # MLflow Configuration (from env)
  MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI}
  MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  MLFLOW_BACKEND_URI: ${MLFLOW_BACKEND_URI}

  # MySQL Configuration for data storage
  AIRFLOW_VAR_MYSQL_HOST: ${MYSQL_HOST}
  AIRFLOW_VAR_MYSQL_PORT: ${MYSQL_PORT}
  AIRFLOW_VAR_MYSQL_USER: ${MYSQL_USER}
  AIRFLOW_VAR_MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  AIRFLOW_VAR_MYSQL_DATABASE: ${MYSQL_DATABASE}

services:
  airflow-db:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - airflow_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL database for storing covertype data
  mysql-db:
    image: mysql:8.0
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # build de la imagen custom
  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      <<: *airflow-env
    command: ["airflow", "db", "init"]
    restart: "no"
    volumes:
      - ./airflow/dags:/opt/airflow/dags

  airflow-create-user:
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      <<: *airflow-env
    command: >
      airflow users create --username ${AIRFLOW_ADMIN_USER} --firstname admin --lastname admin
      --role Admin --email ${AIRFLOW_ADMIN_EMAIL} --password ${AIRFLOW_ADMIN_PASSWORD}
    restart: "no"

  airflow-webserver:
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      airflow-create-user:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      <<: *airflow-env
    command: ["airflow", "webserver"]
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags

  airflow-scheduler:
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      <<: *airflow-env
    command: ["airflow", "scheduler"]
    volumes:
      - ./airflow/dags:/opt/airflow/dags

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - '80:80'
    volumes:
      - ./api/data:/data
      - ./api/main.py:/main.py
    restart: always

  inference-api:
    build:
      context: ./inference_api
    image: covertype-inference:latest
    container_name: inference-api
    ports:
      - "8504:8504"
    environment:
      MODEL_NAME: "covertype_rf"
      DUMMY_MODE: "1"                        # quÃ­talo cuando uses MLflow real
      MLFLOW_TRACKING_URI: "http://mlflow:5000"
      MLFLOW_S3_ENDPOINT_URL: "http://minio:9000"
      AWS_ACCESS_KEY_ID: "${MINIO_ROOT_USER}"
      AWS_SECRET_ACCESS_KEY: "${MINIO_ROOT_PASSWORD}"
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8504"]
    
  ui:
    build:
      context: ./ui_streamlit
    image: covertype-ui:latest
    container_name: ui-streamlit
    environment:
      INFERENCE_API_URL: "http://inference-api:8504"
    ports:
      - "8503:8503"  

volumes:
  airflow_db:
  mysql_data:

