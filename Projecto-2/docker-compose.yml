version: "3.8"

x-airflow-env: &airflow-env
  AIRFLOW_UID: ${AIRFLOW_UID}
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
  AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@airflow-db:5432/${POSTGRES_DB}
  AIRFLOW__WEBSERVER__RBAC: "true"
  _PIP_ADDITIONAL_REQUIREMENTS: ""

    # Airflow Variables for DAG
  AIRFLOW_VAR_P2_API_BASE: "http://10.43.100.103:80"
  AIRFLOW_VAR_P2_GROUP_ID: "3"
  AIRFLOW_VAR_P2_API_PATH: "/data"
  AIRFLOW_VAR_P2_TARGET_COL: "Cover_Type"
  AIRFLOW_VAR_P2_SCHEDULE_CRON: "*/5 * * * *"
  AIRFLOW_VAR_P2_DATA_DIR: "/opt/airflow/data/p2"
  AIRFLOW_VAR_P2_RANDOM_STATE: "42"
  AIRFLOW_VAR_P2_TEST_SIZE: "0.2"

  # Variables adicionales para el proyecto
  P2_EXTERNAL_API: "http://10.43.100.103:80"
  P2_GROUP_ID: "3" # Ver https://campusvirtuallms.javeriana.edu.co/d2l/lms/group/user_group_list.d2l?ou=299201
  MLFLOW_TRACKING_URI: "http://mlflow:5000"
  MLFLOW_S3_ENDPOINT_URL: "http://minio:9000"
  AWS_ACCESS_KEY_ID: "minioadmin"
  AWS_SECRET_ACCESS_KEY: "minioadmin"
  MLFLOW_BACKEND_URI: "mysql+pymysql://mlflow:mlflow@mlflow-db:3306/mlflow"

services:
  airflow-db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - airflow_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # build de la imagen custom
  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
    environment:
      <<: *airflow-env
    command: ["airflow", "db", "init"]
    restart: "no"
    volumes:
      - ./airflow/dags:/opt/airflow/dags

  airflow-create-user:
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-env
    command: >
      airflow users create --username ${AIRFLOW_ADMIN_USER} --firstname admin --lastname admin
      --role Admin --email ${AIRFLOW_ADMIN_EMAIL} --password ${AIRFLOW_ADMIN_PASSWORD}
    restart: "no"

  airflow-webserver:
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      airflow-create-user:
        condition: service_completed_successfully
    environment:
      <<: *airflow-env
    command: ["airflow", "webserver"]
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags

  airflow-scheduler:
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-env
    command: ["airflow", "scheduler"]
    volumes:
      - ./airflow/dags:/opt/airflow/dags

volumes:
  airflow_db: