version: "3.8"

x-airflow-env: &airflow-env
  AIRFLOW_UID: ${AIRFLOW_UID}
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
  AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@airflow-db:5432/${POSTGRES_DB}
  AIRFLOW__WEBSERVER__RBAC: "true"
  AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY}
  AIRFLOW__LOGGING__REMOTE_LOGGING: "false"
  AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ""
  AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
  _PIP_ADDITIONAL_REQUIREMENTS: ""

  # Airflow Variables for DAG (all from env)
  AIRFLOW_VAR_P2_API_BASE: ${P2_API_BASE}
  AIRFLOW_VAR_P2_GROUP_ID: ${P2_GROUP_ID}
  AIRFLOW_VAR_P2_API_PATH: ${P2_API_PATH}
  AIRFLOW_VAR_P2_TARGET_COL: ${P2_TARGET_COL}
  AIRFLOW_VAR_P2_SCHEDULE_CRON: ${P2_SCHEDULE_CRON}
  AIRFLOW_VAR_P2_DATA_DIR: ${P2_DATA_DIR}
  AIRFLOW_VAR_P2_RANDOM_STATE: ${P2_RANDOM_STATE}
  AIRFLOW_VAR_P2_TEST_SIZE: ${P2_TEST_SIZE}
  AIRFLOW_VAR_P2_MIN_SAMPLE_INCREMENT: 80

  # MLflow Configuration (from env)
  MLFLOW_TRACKING_URI: http://mlflow:5000
  MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  MLFLOW_BACKEND_URI: ${MLFLOW_BACKEND_URI}

  # MySQL Configuration for data storage
  AIRFLOW_VAR_MYSQL_HOST: ${MYSQL_HOST}
  AIRFLOW_VAR_MYSQL_PORT: ${MYSQL_PORT}
  AIRFLOW_VAR_MYSQL_USER: ${MYSQL_USER}
  AIRFLOW_VAR_MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  AIRFLOW_VAR_MYSQL_DATABASE: ${MYSQL_DATABASE}

services:
  airflow-db:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - airflow_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL database for storing covertype data
  mysql-db:
    image: mysql:8.0
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # MLflow Backend Database
  # ==========================================
  mlflow-db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: mlflow_root_pass
      MYSQL_DATABASE: mlflow
      MYSQL_USER: mlflow
      MYSQL_PASSWORD: mlflow
    volumes:
      - mlflow_db:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "mlflow", "-pmlflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==========================================
  # MinIO - S3 Object Storage
  # ==========================================
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==========================================
  # MinIO Client - Create Bucket
  # ==========================================
  minio-create-bucket:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/mlflow --ignore-existing;
      mc anonymous set download myminio/mlflow;
      exit 0;
      "
    restart: "no"

  # ==========================================
  # MLflow Tracking Server (CORREGIDO)
  # ==========================================
  mlflow:
      image: python:3.11-slim
      command: >
        bash -c "
        pip install mlflow==3.2.0 pymysql==1.1.0 boto3==1.34.0 &&
        sleep 10 &&
        exec mlflow server
        --backend-store-uri mysql+pymysql://mlflow:mlflow@mlflow-db:3306/mlflow
        --default-artifact-root s3://mlflow/
        --host 0.0.0.0
        --port 5000
        --workers 1
        "
      depends_on:
        mlflow-db:
          condition: service_healthy
        minio:
          condition: service_healthy
        minio-create-bucket:
          condition: service_completed_successfully
      environment:
        AWS_ACCESS_KEY_ID: minioadmin
        AWS_SECRET_ACCESS_KEY: minioadmin
        MLFLOW_S3_ENDPOINT_URL: http://minio:9000
        MLFLOW_S3_IGNORE_TLS: "true"
      volumes:
        - mlflow_artifacts:/mlflow/artifacts
      ports:
        - "5001:5000"
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
        interval: 10s
        timeout: 5s
        retries: 10
        start_period: 30s
      restart: unless-stopped

  # build de la imagen custom
  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      <<: *airflow-env
    command: ["airflow", "db", "init"]
    restart: "no"
    volumes:
      - ./airflow/dags:/opt/airflow/dags

  airflow-create-user:
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      <<: *airflow-env
    command: >
      airflow users create --username ${AIRFLOW_ADMIN_USER} --firstname admin --lastname admin
      --role Admin --email ${AIRFLOW_ADMIN_EMAIL} --password ${AIRFLOW_ADMIN_PASSWORD}
    restart: "no"

  airflow-set-variables:
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      airflow-create-user:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      <<: *airflow-env
    command: >
      bash -c "
      airflow variables set P2_API_BASE '${P2_API_BASE}' || true &&
      airflow variables set P2_GROUP_ID '${P2_GROUP_ID}' || true &&
      airflow variables set P2_API_PATH '${P2_API_PATH}' || true &&
      airflow variables set P2_TARGET_COL '${P2_TARGET_COL}' || true &&
      airflow variables set P2_SCHEDULE_CRON '${P2_SCHEDULE_CRON}' || true &&
      airflow variables set P2_DATA_DIR '${P2_DATA_DIR}' || true &&
      airflow variables set P2_RANDOM_STATE '${P2_RANDOM_STATE}' || true &&
      airflow variables set P2_TEST_SIZE '${P2_TEST_SIZE}' || true &&
      airflow variables set P2_MIN_SAMPLE_INCREMENT '10' || true &&
      airflow variables set MLFLOW_TRACKING_URI 'http://mlflow:5000' || true &&
      airflow variables set MYSQL_HOST '${MYSQL_HOST}' || true &&
      airflow variables set MYSQL_PORT '${MYSQL_PORT}' || true &&
      airflow variables set MYSQL_USER '${MYSQL_USER}' || true &&
      airflow variables set MYSQL_PASSWORD '${MYSQL_PASSWORD}' || true &&
      airflow variables set MYSQL_DATABASE '${MYSQL_DATABASE}' || true &&
      echo 'Variables de Airflow configuradas exitosamente'
      "
    restart: "no"

  airflow-webserver:
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      airflow-create-user:
        condition: service_completed_successfully
      airflow-set-variables:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      <<: *airflow-env
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      MLFLOW_S3_IGNORE_TLS: "true"
    command: ["airflow", "webserver"]
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags

  airflow-scheduler:
    image: airflow-custom:2.9.2
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
      airflow-set-variables:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      <<: *airflow-env
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      MLFLOW_S3_IGNORE_TLS: "true"
    command: ["airflow", "scheduler"]
    volumes:
      - ./airflow/dags:/opt/airflow/dags

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - '80:80'
    volumes:
      - ./api/data:/data
      - ./api/main.py:/main.py
    restart: always

  # ==========================================
  # Inference API
  # ==========================================
  inference:
    build:
      context: ./inference
      dockerfile: Dockerfile
    depends_on:
      - mlflow
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MODEL_NAME: covertype_classifier
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    ports:
      - "8000:8000"
    restart: unless-stopped

  # ==========================================
  # Streamlit UI (BONO)
  # ==========================================
  streamlit:
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    depends_on:
      - mlflow
      - inference
      - mysql-db
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      INFERENCE_API_URL: http://inference:8000
      MYSQL_HOST: mysql-db
      MYSQL_PORT: 3306
      MYSQL_USER: covertype_user
      MYSQL_PASSWORD: covertype_pass123
      MYSQL_DATABASE: covertype_db
    ports:
      - "8503:8503"
    restart: unless-stopped

volumes:
  airflow_db:
  mysql_data:
  mlflow_db:
  minio_data:
  mlflow_artifacts: